package Menu;

import javafx.geometry.Pos;
import javafx.scene.control.Label;
import javafx.scene.control.ScrollPane;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.VBox;
import javafx.scene.text.Text;

import java.io.*;
import java.text.DecimalFormat;

public class Controller {

    public static String[] filePath = new String[200];
    public static int fileCount = 0;

    public GridPane CorrelationMatrix;
    public ScrollPane scrollPane;
    public Text longestString;
    public Text fileFound;
    public Text lineMatched;

    /*
    int fileCount = new File("ScanThis/").list().length;
    int lineCount1 = 0;
    int lineCount2 = 0;
    int otherLC2 = 0;

    BufferedReader bFile1 = null;
    BufferedReader bFile2 = null;

    String line1;
    String line2;

    String line1SansSpaces = "";
    String line2SansSpaces = "";

    double[][] lineReader = new double[20][20];
    double[][] similarityCount = new double[20][20];

    String[][] lineStorage1 = new String[200][200];
    String[][] lineStorage2 = new String[200][200];

    double[][] similarityIndex = new double[5][5];

     */

    BufferedReader bFile1 = null;
    BufferedReader bFile2 = null;

    String line1 = "";
    String line2 = "";

    String line1SansSpaces = "";
    String line2SansSpaces = "";
    String longestLine = "";
    String longestLineFile1 = "";
    String longestLineFile2 = "";

    int currentCharacterCount = 0;
    int longestCharacterCount = 0;
    int lineCount = 0;
    int longestLineNum = 0;

    int lineCount1 = 0;
    int lineCount2 = 0;

    double[][] lineReader = new double[200][200];
    double[][] similarityCount = new double[200][200];

    String[][] lineStorage1 = new String[200][500];
    String[][] lineStorage2 = new String[200][500];

    double[][] similarityIndex = new double[200][200];


    DecimalFormat df = new DecimalFormat("0.00");
    String directoryPath = "assets/Submissions";
    File submissionsFolder = new File(directoryPath);


    public void initialize() throws IOException {
/*
        for(int i = 1; i <= fileCount; i++){
            for(int j = 1; j <= fileCount; j++){
                lineReader[i][j] = 0;
                similarityCount[i][j] = 1;
            }
        }

        for(int i = 0; i < 200; i++){
            for(int j = 0; j < 200; j++){
                lineStorage1[i][j] = "";
                lineStorage2[i][j] = "";
            }
        }

        for(int i = 0; i < fileCount-3; i++){
            for(int j = 0; j < fileCount-3; j++){
                bFile1 = new BufferedReader(new FileReader("ScanThis/test_program" + i + ".java"));
                bFile2 = new BufferedReader(new FileReader("ScanThis/test_program" + j + ".java"));

                lineCount1 = 0;
                while ((line1 = bFile1.readLine()) != null){
                    line1SansSpaces = line1.replaceAll("\\s+", "");
                    lineCount1 = lineCount1 + 1;
                    lineStorage1[i][lineCount1] = line1SansSpaces;

                    if(bFile2.readLine() != null){
                        lineCount2 = 0;
                        otherLC2 = 0;
                        while((line2 = bFile2.readLine()) != null){
                            line2SansSpaces = line2.replaceAll("\\s+", "");
                            lineCount2 = lineCount2 + 1;
                            otherLC2++;
                            lineStorage2[j][lineCount2] = line2SansSpaces;
                        }
                    }

                }
            }
        }

        for(int i = 0; i < fileCount-3; i++){
            for(int j = 0; j < fileCount-3; j++){
                bFile1 = new BufferedReader(new FileReader("ScanThis/test_program" + i + ".java"));
                bFile2 = new BufferedReader(new FileReader("ScanThis/test_program" + j + ".java"));
                if(bFile1.readLine() != null) {
                    lineCount1 = 0;
                    while ((line1 = bFile1.readLine()) != null) {
                        lineCount1 = lineCount1 + 1;
                    }
                }
                if(bFile2.readLine() != null) {
                    lineCount2 = 0;
                    while ((line2 = bFile2.readLine()) != null) {
                        lineCount2 = lineCount2 + 1;
                    }
                }
                System.out.println("\nFILE" + i + " vs " + j +" - "+ lineCount1 + " vs " + lineCount2);
                if (lineCount1 > lineCount2) lineReader[i][j] = lineCount1;
                else lineReader[i][j] = lineCount2;
            }
        }

        for(int i = 0; i < fileCount-3; i++){
            for(int j = 0; j < fileCount-3; j++){
                System.out.println("\nFILE" + i + " vs " + j);
                lineCount1 = 0;
                while (lineCount1 < lineReader[i][j]){
                    lineCount1 = lineCount1 + 1;
                    lineCount2 = 0;
                    while(lineCount2 < lineReader[i][j]){
                        lineCount2 = lineCount2 + 1;
                        if (lineStorage1[i][lineCount1].equals(lineStorage2[j][lineCount2])) {
                            System.out.print("FOUND!");
                            similarityCount[i][j] = similarityCount[i][j] + 1;
                            break;
                        }
                    }
                }
            }
        }

        for(int i = 0; i <= fileCount-3; i++){
            for(int j = 0; j <= fileCount-3; j++){
                similarityIndex[i][j] = similarityCount[i][j] / lineReader[i][j];
                similarityIndex[i][j] = Math.round(similarityIndex[i][j] * 100.0) / 100.0;
            }
    }

        for(int i = 0; i < fileCount-3; i++){
            for(int j = 0; j < fileCount-3; j++){
                Label correlationScore = new Label();
                correlationScore.setText(String.valueOf(similarityIndex[i][j]));
                VBox cellFormat = new VBox();
                correlationScore.setStyle("-fx-text-fill: #000000;");
                cellFormat.setAlignment(Pos.CENTER);

                if(similarityIndex[i][j] <= 0) cellFormat.setStyle("-fx-border-color: #000000;\n" + "-fx-background-color: #ffffff;");
                else if(similarityIndex[i][j] <= 0.125) cellFormat.setStyle("-fx-border-color: #000000;\n" + "-fx-background-color: #cccccc;");
                else if(similarityIndex[i][j] <= 0.25) cellFormat.setStyle("-fx-border-color: #000000;\n" + "-fx-background-color: #ffffb3;");
                else if(similarityIndex[i][j] <= 0.375) cellFormat.setStyle("-fx-border-color: #000000;\n" + "-fx-background-color: #fed976;");
                else if(similarityIndex[i][j] <= 0.50) cellFormat.setStyle("-fx-border-color: #000000;\n" + "-fx-background-color: #feb34f;");
                else if(similarityIndex[i][j] <= 0.625) cellFormat.setStyle("-fx-border-color: #000000;\n" + "-fx-background-color: #fd8d3c;");
                else if(similarityIndex[i][j] <= 0.75) cellFormat.setStyle("-fx-border-color: #000000;\n" + "-fx-background-color: #fb4e29;");
                else if(similarityIndex[i][j] <= 0.875) cellFormat.setStyle("-fx-border-color: #000000;\n" + "-fx-border-color: black" + "-fx-background-color: #e41a1c;");
                else if(similarityIndex[i][j] < 1){
                    cellFormat.setStyle("-fx-border-color: #000000;\n" + "-fx-background-color: #b10026;");
                    correlationScore.setStyle("-fx-text-fill: #ffffff;");
                }
                else if(similarityIndex[i][j] >= 1) {
                    cellFormat.setStyle("-fx-border-color: #000000;\n" + "-fx-background-color: #000000;");
                    correlationScore.setStyle("-fx-text-fill: #ffffff;");
                }

                cellFormat.getChildren().addAll(correlationScore);
                CorrelationMatrix.add(cellFormat, j, i);
            }
        }

        bFile1.close();
        bFile2.close();
*/


        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


        if(submissionsFolder.exists() && submissionsFolder.isDirectory()){
            File arr[] = submissionsFolder.listFiles();
            System.out.println("**********************************************");
            System.out.println("Files from main directory : " + submissionsFolder);
            System.out.println("**********************************************");

            listFiles(arr, 0 ,0);
        }

        for(int i = 0; i <= fileCount; i++){
            for(int j = 0; j <= fileCount; j++){
                lineReader[i][j] = 0;
                similarityCount[i][j] = 1;
            }
        }

        for(int i = 1; i < 200; i++){
            for(int j = 1; j < 500; j++){
                lineStorage1[i][j] = "";
                lineStorage2[i][j] = "";
            }
        }

        // LINE TO ARRAY PUSHING
        for(int i = 0; i <= fileCount-1; i++){
            for(int j = 0; j <= fileCount-1; j++){
                bFile1 = new BufferedReader(new FileReader(filePath[i]));
                bFile2 = new BufferedReader(new FileReader(filePath[j]));

                lineCount1 = 0;
                while ((line1 = bFile1.readLine()) != null){
                    line1SansSpaces = line1.replaceAll("\\s+", "");
                    lineCount1 = lineCount1 + 1;
                    lineStorage1[i][lineCount1] = line1SansSpaces;

                    if(bFile2.readLine() != null) {
                        lineCount2 = 0;
                        while ((line2 = bFile2.readLine()) != null) {
                            line2SansSpaces = line2.replaceAll("\\s+", "");
                            lineCount2 = lineCount2 + 1;
                            lineStorage2[j][lineCount2] = line2SansSpaces;
                        }
                    }
                }
            }
        }

        // TOTAL LINE COUNTER
        for(int i = 0; i <= fileCount-1; i++){
            for(int j = 0; j <= fileCount-1; j++){
                bFile1 = new BufferedReader(new FileReader(filePath[i]));
                bFile2 = new BufferedReader(new FileReader(filePath[j]));
                if(bFile1.readLine() != null) {
                    lineCount1 = 0;
                    while (bFile1.readLine() != null) {
                        lineCount1 = lineCount1 + 1;
                    }
                }
                if(bFile2.readLine() != null) {
                    lineCount2 = 0;
                    while (bFile2.readLine() != null) {
                        lineCount2 = lineCount2 + 1;
                    }
                }
                // gets the total amount of lines for similarity of the file with the largest number of lines.
                //System.out.println("\nFILE" + i + " vs " + j +" - "+ lineCount1 + " vs " + lineCount2);
                if (lineCount1 < lineCount2) lineReader[i][j] = lineCount1;
                else lineReader[i][j] = lineCount2;
            }
        }

        // LINE SIMILARITY CHECKER
        for(int i = 0; i <= fileCount-1; i++){
            for(int j = 0; j <= fileCount-1; j++){
                //System.out.println("\nFILE " + i + " vs " + j);
                lineCount1 = 0;
                while (lineCount1 < lineReader[i][j]){
                    lineCount1++;
                    lineCount2 = 0;
                    while(lineCount2 < lineReader[i][j]){
                        lineCount2++;
                        if (lineStorage1[i][lineCount1].equals(lineStorage2[j][lineCount2])) {
                            //System.out.print("FOUND!");
                            similarityCount[i][j]++;
                            break;
                        }
                    }
                }
            }
        }

        // SEARCH FOR THE LONGEST LINE SIMILARITY
        for(int i = 0; i <= fileCount-1; i++){
            for(int j = 0; j <= fileCount-1; j++){
                bFile1 = new BufferedReader(new FileReader(filePath[i]));
                bFile2 = new BufferedReader(new FileReader(filePath[j]));
                while (((line1 = bFile1.readLine()) != null) && ((line2 = bFile2.readLine()) != null)) {
                    lineCount = 0;
                    lineCount = lineCount + 1;

                    line1SansSpaces = line1.replaceAll("\\s+","");
                    line2SansSpaces = line2.replaceAll("\\s+","");

                    if (line1SansSpaces.toLowerCase().equals(line2SansSpaces.toLowerCase())) {
                        if(!filePath[i].equals(filePath[j])){
                            currentCharacterCount = 0;
                            for(int k = 0; k < line1SansSpaces.length(); k++) {
                                currentCharacterCount++;
                            }
                            if (currentCharacterCount > longestCharacterCount){
                                longestCharacterCount = currentCharacterCount;
                                longestLine = line1;
                                longestLineFile1 = filePath[i];
                                longestLineFile2 = filePath[j];
                                longestLineNum = lineCount;
                            }
                        }
                    }
                }
            }
        }

        /*
        ========================
            OUTPUTS
        ========================
         */
        System.out.println("\nSimilarity index matrix");
        for(int i = 0; i <= fileCount-1; i++){
            for(int j = 0; j <= fileCount-1; j++){
                similarityIndex[i][j] = similarityCount[i][j] / lineReader[i][j];
                Label correlationScore = new Label();
                correlationScore.setText(String.valueOf(similarityIndex[i][j]));
                VBox cellFormat = new VBox();
                correlationScore.setStyle("-fx-text-fill: #000000;");
                cellFormat.setAlignment(Pos.CENTER);

                if(similarityIndex[i][j] <= 0) cellFormat.setStyle("-fx-border-color: #000000;\n" + "-fx-background-color: #ffffff;");
                else if(similarityIndex[i][j] <= 0.125) cellFormat.setStyle("-fx-border-color: #000000;\n" + "-fx-background-color: #cccccc;");
                else if(similarityIndex[i][j] <= 0.25) cellFormat.setStyle("-fx-border-color: #000000;\n" + "-fx-background-color: #ffffb3;");
                else if(similarityIndex[i][j] <= 0.375) cellFormat.setStyle("-fx-border-color: #000000;\n" + "-fx-background-color: #fed976;");
                else if(similarityIndex[i][j] <= 0.50) cellFormat.setStyle("-fx-border-color: #000000;\n" + "-fx-background-color: #feb34f;");
                else if(similarityIndex[i][j] <= 0.625) cellFormat.setStyle("-fx-border-color: #000000;\n" + "-fx-background-color: #fd8d3c;");
                else if(similarityIndex[i][j] <= 0.75) cellFormat.setStyle("-fx-border-color: #000000;\n" + "-fx-background-color: #fb4e29;");
                else if(similarityIndex[i][j] <= 0.875) cellFormat.setStyle("-fx-border-color: #000000;\n" + "-fx-border-color: black;\n" + "-fx-background-color: #e41a1c;");
                else if(similarityIndex[i][j] < 1){
                    cellFormat.setStyle("-fx-border-color: #000000;\n" + "-fx-background-color: #b10026;");
                    correlationScore.setStyle("-fx-text-fill: #ffffff;");
                }
                else if(similarityIndex[i][j] >= 1) {
                    cellFormat.setStyle("-fx-border-color: #000000;\n" + "-fx-background-color: #000000;");
                    correlationScore.setStyle("-fx-text-fill: #ffffff;");
                }

                cellFormat.getChildren().addAll(correlationScore);
                CorrelationMatrix.add(cellFormat, j, i);
            }
        }

        longestLineFile1 = longestLineFile1.replace("assets\\Submissions\\","");
        longestLineFile2 = longestLineFile2.replace("assets\\Submissions\\","");

        System.out.println("\nLongest String Similarity: " + longestLine);
        System.out.println("Found in Files: " + longestLineFile1 + "\t\tAND\t\t" + longestLineFile2);
        System.out.println("Found in Line: " + longestLineNum);

        longestString.setText(longestLine);
        fileFound.setText(longestLineFile1 + "\t\tAND\t\t" + longestLineFile2);
        lineMatched.setText(String.valueOf(longestLineNum));


        // THE PROGRAM COMPARES 102 FILES

        bFile1.close();
        bFile2.close();
    }

    static void listFiles(File[] arr, int index, int level){
        if(index == arr.length) return;

        if(arr[index].isDirectory()){
            listFiles(arr[index].listFiles(), 0, level+1);
        }

        else if(arr[index].isFile()) {
            if (arr[index].getName().endsWith(".java") || arr[index].getName().endsWith(".cpp")){
                System.out.println(arr[index].getPath());
                filePath[fileCount] = arr[index].getPath();
                fileCount++;
            }
        }

        else if(arr[index].isDirectory()){
            System.out.print(arr[index].getName() + "/");
            listFiles(arr[index].listFiles(), 0, level+1);
        }
        listFiles(arr, ++index, level);
    }
}

